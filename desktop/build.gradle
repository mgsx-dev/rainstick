apply plugin: "java"

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "net.mgsx.rainstick.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../android/assets");

configurations{
	pd
}

dependencies{
	pd "net.mgsx.gdx:gdx-pd:$pdVersion:pd@zip"
}

task copyPdPatches() {
	configurations.pd.resolvedConfiguration.resolvedArtifacts.each { artifact ->
      copy {
        from zipTree( artifact.getFile() )
        into file("$buildDir/pd/$artifact.name")
      }
    }
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}


task spawnPdRemote(group: "pd", description: "Run Puredata with libs path and remote") {  
	doLast{
		def workingDir = "$projectDir/../android/assets/pd"   
		new ProcessBuilder("pd", "-noprefs", "-path", "$buildDir/pd/gdx-pd", "-send", "pd-gdx-pd-network-default.pd vis 0", "-send", "pd dsp 1", "-open", "gdx-pd-network-default.pd", "engine.pd")
        .redirectErrorStream(true)
        .directory(new File(workingDir))
        .start()
	}
} 

task runRemote(type:JavaExec, group: "pd", description: "Run Puredata with libs path and remote", dependsOn: classes) {  
	main = "net.mgsx.rainstick.desktop.EditorDesktopRemoteLauncher"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = "$projectDir/../android/assets"
    ignoreExitValue = true
} 
